// Core configuration
generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models required by Better Auth.
// These should align with the fields Better Auth expects.

model User {
  id                String             @id
  name              String
  email             String             @unique
  emailVerified     Boolean
  image             String?
  createdAt         DateTime
  updatedAt         DateTime
  accounts          Account[]
  sessions          Session[]
  noteCollaborators NoteCollaborator[]
  collectionMembers CollectionMember[]
  ownedCollections  Collection[]       @relation("OwnedCollections")
  ownedNotes        Note[]             @relation("OwnedNotes")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Jwks {
  id         String   @id
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}

// Application models for collections and notes.

model Collection {
  id              String             @id
  title           String
  ownerId         String
  owner           User               @relation("OwnedCollections", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt       DateTime
  serverCreatedAt DateTime           @default(now())
  updatedAt       DateTime
  serverUpdatedAt DateTime           @updatedAt
  notes           Note[]
  members         CollectionMember[]

  @@map("collection")
}

model CollectionMember {
  id           String     @id
  userId       String
  collectionId String
  canEdit      Boolean    @default(false)
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([collectionId, userId])
  @@map("collection_member")
}

model Note {
  id                String             @id
  title             String
  description       String?
  ownerId           String
  owner             User               @relation("OwnedNotes", fields: [ownerId], references: [id], onDelete: Cascade)
  collectionId      String?
  collection        Collection?        @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  isPublic          Boolean            @default(false)
  createdAt         DateTime
  serverCreatedAt   DateTime           @default(now())
  updatedAt         DateTime
  serverUpdatedAt   DateTime           @updatedAt
  noteCollaborators NoteCollaborator[]

  @@map("note")
}

model NoteCollaborator {
  id        String   @id
  noteId    String
  userId    String
  canEdit   Boolean  @default(false)
  createdAt DateTime @default(now())
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
  @@map("note_collaborator")
}

enum YDocType {
  COLLECTION
  NOTE
}

model YDocState {
  id         String   @id // same as the collection or note ID
  docType    YDocType // "collection" or "note"
  encodedDoc Bytes // yjs doc as a binary blob
  updatedAt  DateTime @updatedAt

  @@map("y_doc_state")
}
