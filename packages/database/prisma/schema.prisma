generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id
  name              String
  email             String             @unique
  emailVerified     Boolean
  image             String?
  createdAt         DateTime
  updatedAt         DateTime
  accounts          Account[]
  invitations       Invitation[]
  members           Member[]
  createdNotes      Note[]             @relation("CreatedNotes")
  ownedNotes        Note[]             @relation("OwnedNotes")
  noteCollaborators NoteCollaborator[]
  sessions          Session[]

  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?      @unique
  logo        String?
  createdAt   DateTime
  metadata    String?
  invitations Invitation[]
  members     Member[]
  notes       Note[]

  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  userId         String
  role           String
  createdAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Note {
  id             String             @id
  title          String
  path           String             @unique
  creatorId      String
  ownerId        String?
  organizationId String?
  isPublic       Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  creator        User               @relation("CreatedNotes", fields: [creatorId], references: [id], onDelete: Cascade)
  organization   Organization?      @relation(fields: [organizationId], references: [id])
  owner          User?              @relation("OwnedNotes", fields: [ownerId], references: [id])
  collaborators  NoteCollaborator[]

  @@map("note")
}

model NoteCollaborator {
  id        String   @id
  noteId    String
  userId    String
  canEdit   Boolean  @default(false)
  createdAt DateTime @default(now())
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
  @@map("note_collaborator")
}
