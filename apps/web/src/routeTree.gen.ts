/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as GoodbyeImport } from './routes/goodbye'
import { Route as authenticatedRouteImport } from './routes/(authenticated)/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as IndexImport } from './routes/index'
import { Route as authenticatedSettingsImport } from './routes/(authenticated)/settings'
import { Route as authenticatedSetPasswordImport } from './routes/(authenticated)/set-password'
import { Route as authenticatedNotesImport } from './routes/(authenticated)/notes'
import { Route as authVerifyEmailImport } from './routes/(auth)/verify-email'
import { Route as authSignupImport } from './routes/(auth)/signup'
import { Route as authSigninImport } from './routes/(auth)/signin'
import { Route as authResetPasswordImport } from './routes/(auth)/reset-password'
import { Route as authForgotPasswordImport } from './routes/(auth)/forgot-password'
import { Route as authenticatedSettingsIndexImport } from './routes/(authenticated)/settings.index'
import { Route as authenticatedNotesIndexImport } from './routes/(authenticated)/notes.index'
import { Route as authenticatedSettingsSectionImport } from './routes/(authenticated)/settings.$section'
import { Route as authenticatedNotesNoteIdImport } from './routes/(authenticated)/notes.$noteId'

// Create/Update Routes

const GoodbyeRoute = GoodbyeImport.update({
  id: '/goodbye',
  path: '/goodbye',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedRouteRoute = authenticatedRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedSettingsRoute = authenticatedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedSetPasswordRoute = authenticatedSetPasswordImport.update({
  id: '/set-password',
  path: '/set-password',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedNotesRoute = authenticatedNotesImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authVerifyEmailRoute = authVerifyEmailImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => authRouteRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authRouteRoute,
} as any)

const authSigninRoute = authSigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => authRouteRoute,
} as any)

const authResetPasswordRoute = authResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => authRouteRoute,
} as any)

const authForgotPasswordRoute = authForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => authRouteRoute,
} as any)

const authenticatedSettingsIndexRoute = authenticatedSettingsIndexImport.update(
  {
    id: '/',
    path: '/',
    getParentRoute: () => authenticatedSettingsRoute,
  } as any,
)

const authenticatedNotesIndexRoute = authenticatedNotesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authenticatedNotesRoute,
} as any)

const authenticatedSettingsSectionRoute =
  authenticatedSettingsSectionImport.update({
    id: '/$section',
    path: '/$section',
    getParentRoute: () => authenticatedSettingsRoute,
  } as any)

const authenticatedNotesNoteIdRoute = authenticatedNotesNoteIdImport.update({
  id: '/$noteId',
  path: '/$noteId',
  getParentRoute: () => authenticatedNotesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/goodbye': {
      id: '/goodbye'
      path: '/goodbye'
      fullPath: '/goodbye'
      preLoaderRoute: typeof GoodbyeImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/reset-password': {
      id: '/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authResetPasswordImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/signin': {
      id: '/(auth)/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof authSigninImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/verify-email': {
      id: '/(auth)/verify-email'
      path: '/verify-email'
      fullPath: '/verify-email'
      preLoaderRoute: typeof authVerifyEmailImport
      parentRoute: typeof authRouteImport
    }
    '/(authenticated)/notes': {
      id: '/(authenticated)/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof authenticatedNotesImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/(authenticated)/set-password': {
      id: '/(authenticated)/set-password'
      path: '/set-password'
      fullPath: '/set-password'
      preLoaderRoute: typeof authenticatedSetPasswordImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/(authenticated)/settings': {
      id: '/(authenticated)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof authenticatedSettingsImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/(authenticated)/notes/$noteId': {
      id: '/(authenticated)/notes/$noteId'
      path: '/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof authenticatedNotesNoteIdImport
      parentRoute: typeof authenticatedNotesImport
    }
    '/(authenticated)/settings/$section': {
      id: '/(authenticated)/settings/$section'
      path: '/$section'
      fullPath: '/settings/$section'
      preLoaderRoute: typeof authenticatedSettingsSectionImport
      parentRoute: typeof authenticatedSettingsImport
    }
    '/(authenticated)/notes/': {
      id: '/(authenticated)/notes/'
      path: '/'
      fullPath: '/notes/'
      preLoaderRoute: typeof authenticatedNotesIndexImport
      parentRoute: typeof authenticatedNotesImport
    }
    '/(authenticated)/settings/': {
      id: '/(authenticated)/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof authenticatedSettingsIndexImport
      parentRoute: typeof authenticatedSettingsImport
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authResetPasswordRoute: typeof authResetPasswordRoute
  authSigninRoute: typeof authSigninRoute
  authSignupRoute: typeof authSignupRoute
  authVerifyEmailRoute: typeof authVerifyEmailRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authForgotPasswordRoute: authForgotPasswordRoute,
  authResetPasswordRoute: authResetPasswordRoute,
  authSigninRoute: authSigninRoute,
  authSignupRoute: authSignupRoute,
  authVerifyEmailRoute: authVerifyEmailRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface authenticatedNotesRouteChildren {
  authenticatedNotesNoteIdRoute: typeof authenticatedNotesNoteIdRoute
  authenticatedNotesIndexRoute: typeof authenticatedNotesIndexRoute
}

const authenticatedNotesRouteChildren: authenticatedNotesRouteChildren = {
  authenticatedNotesNoteIdRoute: authenticatedNotesNoteIdRoute,
  authenticatedNotesIndexRoute: authenticatedNotesIndexRoute,
}

const authenticatedNotesRouteWithChildren =
  authenticatedNotesRoute._addFileChildren(authenticatedNotesRouteChildren)

interface authenticatedSettingsRouteChildren {
  authenticatedSettingsSectionRoute: typeof authenticatedSettingsSectionRoute
  authenticatedSettingsIndexRoute: typeof authenticatedSettingsIndexRoute
}

const authenticatedSettingsRouteChildren: authenticatedSettingsRouteChildren = {
  authenticatedSettingsSectionRoute: authenticatedSettingsSectionRoute,
  authenticatedSettingsIndexRoute: authenticatedSettingsIndexRoute,
}

const authenticatedSettingsRouteWithChildren =
  authenticatedSettingsRoute._addFileChildren(
    authenticatedSettingsRouteChildren,
  )

interface authenticatedRouteRouteChildren {
  authenticatedNotesRoute: typeof authenticatedNotesRouteWithChildren
  authenticatedSetPasswordRoute: typeof authenticatedSetPasswordRoute
  authenticatedSettingsRoute: typeof authenticatedSettingsRouteWithChildren
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedNotesRoute: authenticatedNotesRouteWithChildren,
  authenticatedSetPasswordRoute: authenticatedSetPasswordRoute,
  authenticatedSettingsRoute: authenticatedSettingsRouteWithChildren,
}

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof authenticatedRouteRouteWithChildren
  '/goodbye': typeof GoodbyeRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/reset-password': typeof authResetPasswordRoute
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/verify-email': typeof authVerifyEmailRoute
  '/notes': typeof authenticatedNotesRouteWithChildren
  '/set-password': typeof authenticatedSetPasswordRoute
  '/settings': typeof authenticatedSettingsRouteWithChildren
  '/notes/$noteId': typeof authenticatedNotesNoteIdRoute
  '/settings/$section': typeof authenticatedSettingsSectionRoute
  '/notes/': typeof authenticatedNotesIndexRoute
  '/settings/': typeof authenticatedSettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof authenticatedRouteRouteWithChildren
  '/goodbye': typeof GoodbyeRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/reset-password': typeof authResetPasswordRoute
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/verify-email': typeof authVerifyEmailRoute
  '/set-password': typeof authenticatedSetPasswordRoute
  '/notes/$noteId': typeof authenticatedNotesNoteIdRoute
  '/settings/$section': typeof authenticatedSettingsSectionRoute
  '/notes': typeof authenticatedNotesIndexRoute
  '/settings': typeof authenticatedSettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(authenticated)': typeof authenticatedRouteRouteWithChildren
  '/goodbye': typeof GoodbyeRoute
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/reset-password': typeof authResetPasswordRoute
  '/(auth)/signin': typeof authSigninRoute
  '/(auth)/signup': typeof authSignupRoute
  '/(auth)/verify-email': typeof authVerifyEmailRoute
  '/(authenticated)/notes': typeof authenticatedNotesRouteWithChildren
  '/(authenticated)/set-password': typeof authenticatedSetPasswordRoute
  '/(authenticated)/settings': typeof authenticatedSettingsRouteWithChildren
  '/(authenticated)/notes/$noteId': typeof authenticatedNotesNoteIdRoute
  '/(authenticated)/settings/$section': typeof authenticatedSettingsSectionRoute
  '/(authenticated)/notes/': typeof authenticatedNotesIndexRoute
  '/(authenticated)/settings/': typeof authenticatedSettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/goodbye'
    | '/forgot-password'
    | '/reset-password'
    | '/signin'
    | '/signup'
    | '/verify-email'
    | '/notes'
    | '/set-password'
    | '/settings'
    | '/notes/$noteId'
    | '/settings/$section'
    | '/notes/'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/goodbye'
    | '/forgot-password'
    | '/reset-password'
    | '/signin'
    | '/signup'
    | '/verify-email'
    | '/set-password'
    | '/notes/$noteId'
    | '/settings/$section'
    | '/notes'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(authenticated)'
    | '/goodbye'
    | '/(auth)/forgot-password'
    | '/(auth)/reset-password'
    | '/(auth)/signin'
    | '/(auth)/signup'
    | '/(auth)/verify-email'
    | '/(authenticated)/notes'
    | '/(authenticated)/set-password'
    | '/(authenticated)/settings'
    | '/(authenticated)/notes/$noteId'
    | '/(authenticated)/settings/$section'
    | '/(authenticated)/notes/'
    | '/(authenticated)/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
  GoodbyeRoute: typeof GoodbyeRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
  GoodbyeRoute: GoodbyeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)",
        "/(authenticated)",
        "/goodbye"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/forgot-password",
        "/(auth)/reset-password",
        "/(auth)/signin",
        "/(auth)/signup",
        "/(auth)/verify-email"
      ]
    },
    "/(authenticated)": {
      "filePath": "(authenticated)/route.tsx",
      "children": [
        "/(authenticated)/notes",
        "/(authenticated)/set-password",
        "/(authenticated)/settings"
      ]
    },
    "/goodbye": {
      "filePath": "goodbye.tsx"
    },
    "/(auth)/forgot-password": {
      "filePath": "(auth)/forgot-password.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/reset-password": {
      "filePath": "(auth)/reset-password.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/signin": {
      "filePath": "(auth)/signin.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/verify-email": {
      "filePath": "(auth)/verify-email.tsx",
      "parent": "/(auth)"
    },
    "/(authenticated)/notes": {
      "filePath": "(authenticated)/notes.tsx",
      "parent": "/(authenticated)",
      "children": [
        "/(authenticated)/notes/$noteId",
        "/(authenticated)/notes/"
      ]
    },
    "/(authenticated)/set-password": {
      "filePath": "(authenticated)/set-password.tsx",
      "parent": "/(authenticated)"
    },
    "/(authenticated)/settings": {
      "filePath": "(authenticated)/settings.tsx",
      "parent": "/(authenticated)",
      "children": [
        "/(authenticated)/settings/$section",
        "/(authenticated)/settings/"
      ]
    },
    "/(authenticated)/notes/$noteId": {
      "filePath": "(authenticated)/notes.$noteId.tsx",
      "parent": "/(authenticated)/notes"
    },
    "/(authenticated)/settings/$section": {
      "filePath": "(authenticated)/settings.$section.tsx",
      "parent": "/(authenticated)/settings"
    },
    "/(authenticated)/notes/": {
      "filePath": "(authenticated)/notes.index.tsx",
      "parent": "/(authenticated)/notes"
    },
    "/(authenticated)/settings/": {
      "filePath": "(authenticated)/settings.index.tsx",
      "parent": "/(authenticated)/settings"
    }
  }
}
ROUTE_MANIFEST_END */
